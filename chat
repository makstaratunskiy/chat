import base64
import io
import threading
from socket import socket, AF_INET, SOCK_STREAM
import datetime
import os
import winsound
import sys
from customtkinter import *
from tkinter import filedialog
from PIL import Image


class MainWindow(CTk):
   def __init__(self):
       super().__init__()

       self.geometry("400x300")
       self.title("Chat Client")

       self.username = "Max"
       self.avatar_img = None

       # –ú–µ–Ω—é
       self.label = None
       self.menu_frame = CTkFrame(self, width=30, height=300)
       self.menu_frame.pack_propagate(False)
       self.menu_frame.place(x=0, y=0)
       self.is_show_menu = False
       self.speed_animate_menu = -20
       self.btn = CTkButton(self, text="‚ñ∂Ô∏è", command=self.toggle_show_menu, width=30)
       self.btn.place(x=0, y=0)

       # –û—Å–Ω–æ–≤–Ω–µ –ø–æ–ª–µ —á–∞—Ç—É
       self.chat_field = CTkScrollableFrame(self)
       self.chat_field.place(x=0, y=0)

       # –ü–æ–ª–µ –≤–≤–µ–¥–µ–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫–∏
       self.message_entry = CTkEntry(self, placeholder_text="üì§ –í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", height=40)
       self.message_entry.place(x=0, y=0)
       self.message_entry.bind('<Return>', lambda event: self.send_message())
       self.send_button = CTkButton(self, text="‚ñ∂Ô∏è", width=50, height=40, command=self.send_message)
       self.send_button.place(x=0, y=0)

       self.open_img_button = CTkButton(self, text="üìÇ", width=50, height=40, command=self.open_image)
       self.open_img_button.place(x=0, y=0)

       self.adaptive_ui()
       self.bind('<Configure>', lambda event: self.adaptive_ui())

       self.add_message("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:",
                        CTkImage(Image.open("Screenshot_1.png"), size=(300, 300)))

       try:
           self.sock = socket(AF_INET, SOCK_STREAM)
           self.sock.connect(("DESKTOP-QKJUDOL", 3039))
           hello = f"TEXT@{self.username}@[SYSTEM] {self.username} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è(–ª–∞—Å—å) –¥–æ —á–∞—Ç—É!\n"
           self.sock.send(hello.encode('utf-8'))
           threading.Thread(target=self.recv_message, daemon=True).start()
       except Exception as e:
           self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

   def toggle_show_menu(self):
       if self.is_show_menu:
           self.is_show_menu = False
           self.speed_animate_menu *= -1
           self.btn.configure(text="‚ñ∂Ô∏è")
           self.show_menu()
       else:
           self.is_show_menu = True
           self.speed_animate_menu *= -1
           self.btn.configure(text="‚óÄÔ∏è")
           self.show_menu()
           # –ü—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –º–µ–Ω—é ‚Äì –¥–æ–¥–∞–º–æ –∑–º—ñ–Ω—É —ñ–º–µ–Ω—ñ —Ç–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
           self.label = CTkLabel(self.menu_frame,text_color="brown", text="üßë –Ü–º º—è")
           self.label.pack(pady=30)
           self.entry = CTkEntry(self.menu_frame,text_color="green", placeholder_text="üé∏ –í–∞—à –Ω—ñ–∫...")
           self.entry.pack()
           # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
           self.save_button = CTkButton(self.menu_frame, text="–ó–±–µ—Ä–µ–≥—Ç–∏", command=self.save_name)
           self.save_button.pack()
           # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–≤–∞—Ç–∞—Ä–∫–∏
           self.avatar_label = CTkLabel(self.menu_frame, text="–ê–≤–∞—Ç–∞—Ä–∫–∞:")
           self.avatar_label.pack(pady=10)
           self.avatar_img_label = CTkLabel(self.menu_frame, image=self.avatar_img if self.avatar_img else None, text="(–Ω–µ–º–∞—î)", compound="top")
           self.avatar_img_label.pack()
           self.avatar_btn = CTkButton(self.menu_frame, text="–í–∏–±—Ä–∞—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É", command=self.choose_avatar)
           self.avatar_btn.pack(pady=5)

   def show_menu(self):
       self.menu_frame.configure(width=self.menu_frame.winfo_width() + self.speed_animate_menu)
       if not self.menu_frame.winfo_width() >= 200 and self.is_show_menu:
           self.after(10, self.show_menu)
       elif self.menu_frame.winfo_width() >= 60 and not self.is_show_menu:
           self.after(10, self.show_menu)
           if self.label:
               self.label.destroy()
           if getattr(self, "entry", None):
               self.entry.destroy()
           if getattr(self, "save_button", None):
               self.save_button.destroy()
           if getattr(self, "avatar_label", None):
               self.avatar_label.destroy()
           if getattr(self, "avatar_img_label", None):
               self.avatar_img_label.destroy()
           if getattr(self, "avatar_btn", None):
               self.avatar_btn.destroy()
   def choose_avatar(self):
       from PIL import ImageDraw
       file_name = filedialog.askopenfilename()
       if not file_name:
           return
       try:
           pil_img = Image.open(file_name).convert("RGBA")
           size = (60, 60)
           pil_img = pil_img.resize(size, Image.LANCZOS)
           mask = Image.new('L', size, 0)
           draw = ImageDraw.Draw(mask)
           draw.ellipse((0, 0) + size, fill=255)
           result = Image.new('RGBA', size)
           result.paste(pil_img, (0, 0), mask)
           self.avatar_img = CTkImage(result, size=size)
           if hasattr(self, 'avatar_img_label'):
               self.avatar_img_label.configure(image=self.avatar_img, text="")
           self.add_message("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–≤–∞—Ç–∞—Ä–∫—É")
       except Exception as e:
           self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫—É: {e}")

   def save_name(self):
       new_name = self.entry.get().strip()
       if new_name:
           self.username = new_name
           self.add_message(f"–í–∞—à –Ω–æ–≤–∏–π –Ω—ñ–∫: {self.username}")

   def adaptive_ui(self):
       self.menu_frame.configure(height=self.winfo_height())
       self.chat_field.place(x=self.menu_frame.winfo_width(), y=0)
       self.chat_field.configure(width=max(100, self.winfo_width() - self.menu_frame.winfo_width() - 20),
                                 height=max(100, self.winfo_height() - 40))
       self.send_button.place(x=max(0, self.winfo_width() - 50), y=max(0, self.winfo_height() - 40))
       self.message_entry.place(x=self.menu_frame.winfo_width(), y=self.send_button.winfo_y())
       self.message_entry.configure(
           width=max(50, self.winfo_width() - self.menu_frame.winfo_width() - 110))
       self.open_img_button.place(x=max(0, self.winfo_width()-105), y=self.send_button.winfo_y())

   def add_message(self, message, img=None):
       message_frame = CTkFrame(self.chat_field, fg_color="green")
       message_frame.pack(pady=5, anchor='w')
       wrapleng_size = self.winfo_width() - self.menu_frame.winfo_width() - 40

       # –î–æ–¥–∞—î–º–æ —á–∞—Å
       now = datetime.datetime.now().strftime('%H.%M.%S')
       message_with_time = f"[{now}] {message}"

       def delete_message():
           message_frame.destroy()

       # –ö–Ω–æ–ø–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
       del_btn = CTkButton(message_frame, text="üóëÔ∏è", fg_color="#D33E39", width=35, corner_radius=0, command=delete_message)
       del_btn.pack(side='right', padx=5, pady=5)

       # –Ø–∫—â–æ —î –∞–≤–∞—Ç–∞—Ä–∫–∞ —ñ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
       if img:
           CTkLabel(message_frame, text=message_with_time, wraplength=wrapleng_size,
                    text_color='white', image=img, compound='top',
                    justify='left').pack(padx=10, pady=5)
       else:
           if self.avatar_img and message.startswith(f"{self.username}:"):
               CTkLabel(message_frame, image=self.avatar_img, text="", compound='left').pack(side='left', padx=5)
           CTkLabel(message_frame, text=message_with_time, wraplength=wrapleng_size,
                    text_color='white', justify='left').pack(padx=10, pady=5)

   def send_message(self):
       message = self.message_entry.get()
       if message:
           self.add_message(f"{self.username}: {message}")
           data = f"TEXT@{self.username}@{message}\n"
           try:
               self.sock.sendall(data.encode())
           except:
               pass
       self.message_entry.delete(0, END)

   def recv_message(self):
       buffer = ""
       while True:
           try:
               chunk = self.sock.recv(4096)
               if not chunk:
                   break
               buffer += chunk.decode('utf-8', errors='ignore')

               while "\n" in buffer:
                   line, buffer = buffer.split("\n", 1)
                   self.handle_line(line.strip())

           except:
               break
       self.sock.close()

   def handle_line(self, line):
       if not line:
           return
       parts = line.split("@", 3)
       msg_type = parts[0]

       if msg_type == "TEXT":
           if len(parts) >= 3:
               author = parts[1]
               message = parts[2]
               # –ó–≤—É–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
               if author != self.username:
                   winsound.MessageBeep(winsound.MB_ICONASTERISK)
               self.add_message(f"{author}: {message}")
       elif msg_type == "IMAGE":
           if len(parts) >= 4:
               author = parts[1]
               filename = parts[2]
               b64_img = parts[3]
               try:
                   img_data = base64.b64decode(b64_img)
                   pil_img = Image.open(io.BytesIO(img_data))
                   ctk_img = CTkImage(pil_img, size=(300, 300))
                   # –ó–≤—É–∫ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                   if author != self.username:
                       winsound.MessageBeep(winsound.MB_ICONASTERISK)
                   self.add_message(f"{author} –Ω–∞–¥—ñ—Å–ª–∞–≤(–ª–∞) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {filename}", img=ctk_img)
               except Exception as e:
                   self.add_message(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
       else:
           self.add_message(line)

   def open_image(self):
       file_name = filedialog.askopenfilename()
       if not file_name:
           return
       try:
           with open(file_name, "rb") as f:
               raw = f.read()
           b64_data = base64.b64encode(raw).decode()
           short_name = os.path.basename(file_name)
           data = f"IMAGE@{self.username}@{short_name}@{b64_data}\n"
           self.sock.sendall(data.encode())
           self.add_message('', CTkImage(light_image=Image.open(file_name), size=(300, 300)))
       except Exception as e:
           self.add_message(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")


if __name__ == "__main__":
   win = MainWindow()
   win.mainloop()


